def generar_informe_html(resultados):
    """Genera un informe HTML simple con los resultados de las pruebas."""
    html = "<html><head><title>Informe de Chequeo de Entorno</title></head>"
    html += "<body style='font-family: sans-serif;'>"
    html += "<h1>üìä Informe de Chequeo de Entorno</h1>"
    for modulo, resultado in resultados.items():
        estado = "‚úÖ PAS√ì" if resultado else "‚ùå FALL√ì"
        color = "green" if resultado else "red"
        html += f"<p><b>{modulo}:</b> <span style='color:{color};'>{estado}</span></p>"
    html += "</body></html>"

    with open("informe_entorno.html", "w") as f:
        f.write(html)
    print("\nüìÑ Informe HTML generado en 'informe_entorno.html'")

# Y al final del bloque __main__:
if __name__ == "__main__":
    # ... (c√≥digo existente)
    generar_informe_html(resultados)

**2. Endpoint `/test` en Flask:**
#Esta es una pr√°ctica est√°ndar en microservicios para la monitorizaci√≥n. Convertir nuestro script en una funci√≥n que pueda ser llamada desde la API es muy sencillo.

**A√±ade este endpoint a `app/gestor_api.py`:**
```python
# En gestor_api.py, necesitar√≠as importar las funciones de environment_check
# (esto requiere estructurar el c√≥digo para evitar dependencias circulares,
# pero conceptualmente ser√≠a as√≠)

@app.route("/test-environment", methods=["GET"])
def test_environment():
    # Aqu√≠ llamar√≠as a las funciones de chequeo
    # y construir√≠as una respuesta JSON.
    resultados = {
        "entorno_virtual": True, # Placeholder, aqu√≠ ir√≠a la l√≥gica real
        "dependencias": True,
        # ... etc
    }
    status_code = 200 if all(resultados.values()) else 500
    return jsonify(resultados), status_code
